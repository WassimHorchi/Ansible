---
- name: Combined FortiGate Firewall Rule Audit (Unused, No-Comment, Disabled)
  hosts: Fortigate
  gather_facts: no
  connection: local

  vars:
    vdom: "root"
    cutoff_days: 10
    fortigate_token: "jks5sQ1tmz37n8k4xkqytp59p3kd8s"
    scp_password: "Fodha123*"
    local_machine_ip: "192.168.230.139"
    local_machine_user: "wassim"
    local_machine_path: "/home/wassim/Desktop/ansible"
    # CHANGED: Use /tmp for AWX compatibility
    output_dir: "/tmp/ansible_output"
    output_file: "{{ output_dir }}/combined_firewall_audit_report.html"

  tasks:

    - name: Ensure output directory exists
      file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      # REMOVED: No need for become, owner, or group with /tmp

    - name: Get current epoch timestamp
      command: date +%s
      register: current_epoch_result
      delegate_to: localhost

    - name: Set current and cutoff epoch
      set_fact:
        current_epoch: "{{ current_epoch_result.stdout | int }}"
        cutoff_epoch: "{{ (current_epoch_result.stdout | int) - (cutoff_days * 86400) }}"

    - name: Get firewall policy list from FortiGate
      uri:
        url: "http://{{ ansible_host }}/api/v2/cmdb/firewall/policy?vdom={{ vdom }}"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: firewall_policies

    - name: Filter unused rules (last_used = 0 or < cutoff)
      set_fact:
        unused_rules: >-
          [{% for rule in firewall_policies.json.results | default([]) %}
            {% set last_used = rule.get('last_used', 0) | int %}
            {% if last_used == 0 or last_used < cutoff_epoch %}
              {{ rule | combine({'last_used': last_used}) }}{% if not loop.last %},{% endif %}
            {% endif %}
          {% endfor %}]

    - name: Convert last_used to readable date
      set_fact:
        converted_unused_rules: >-
          [{% for rule in unused_rules %}
            {% if rule.last_used != 0 %}
              {% set human_date = lookup('pipe', 'date -d @' ~ rule.last_used ~ ' "+%Y-%m-%d"') %}
              {{ rule | combine({'last_used': human_date}) }}{% if not loop.last %},{% endif %}
            {% else %}
              {{ rule | combine({'last_used': 'Never Used'}) }}{% if not loop.last %},{% endif %}
            {% endif %}
          {% endfor %}]

    - name: Filter rules without comments
      set_fact:
        rules_without_comments: >-
          {{
            firewall_policies.json.results | selectattr('comments', 'equalto', '') | list
          }}

    - name: Filter disabled rules
      set_fact:
        disabled_rules: >-
          {{
            firewall_policies.json.results | selectattr('status', 'equalto', 'disable') | list
          }}

    - name: Save combined audit HTML report
      copy:
        content: |
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Combined FortiGate Firewall Audit Report</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h2 { margin-top: 40px; }
              table { border-collapse: collapse; width: 100%; margin-top: 10px; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; }
            </style>
          </head>
          <body>
            <h1>FortiGate Firewall Audit Report</h1>

            <h2>1. Unused Rules (Last {{ cutoff_days }} days)</h2>
            {% if converted_unused_rules | length > 0 %}
            <table>
              <tr><th>ID</th><th>Name</th><th>Last Used</th><th>Bytes</th><th>Comments</th></tr>
              {% for rule in converted_unused_rules %}
              <tr>
                <td>{{ rule.policyid }}</td>
                <td>{{ rule.name }}</td>
                <td>{{ rule.last_used }}</td>
                <td>{{ rule.bytes | default('N/A') }}</td>
                <td>{{ rule.comments | default('') }}</td>
              </tr>
              {% endfor %}
            </table>
            {% else %}
            <p>✅ No unused rules found.</p>
            {% endif %}

            <h2>2. Rules Without Comments</h2>
            {% if rules_without_comments | length > 0 %}
            <table>
              <tr><th>ID</th><th>Name</th><th>Src Intf</th><th>Dst Intf</th><th>Action</th></tr>
              {% for rule in rules_without_comments %}
              <tr>
                <td>{{ rule.policyid }}</td>
                <td>{{ rule.name }}</td>
                <td>{{ rule.srcintf | map(attribute='name') | join(', ') }}</td>
                <td>{{ rule.dstintf | map(attribute='name') | join(', ') }}</td>
                <td>{{ rule.action }}</td>
              </tr>
              {% endfor %}
            </table>
            {% else %}
            <p>✅ All rules have comments.</p>
            {% endif %}

            <h2>3. Disabled Rules</h2>
            {% if disabled_rules | length > 0 %}
            <table>
              <tr><th>ID</th><th>Name</th><th>Status</th><th>Src Intf</th><th>Dst Intf</th><th>Comments</th></tr>
              {% for rule in disabled_rules %}
              <tr>
                <td>{{ rule.policyid }}</td>
                <td>{{ rule.name }}</td>
                <td>{{ rule.status }}</td>
                <td>{{ rule.srcintf | map(attribute='name') | join(', ') }}</td>
                <td>{{ rule.dstintf | map(attribute='name') | join(', ') }}</td>
                <td>{{ rule.comments | default('') }}</td>
              </tr>
              {% endfor %}
            </table>
            {% else %}
            <p>✅ No disabled rules found.</p>
            {% endif %}
          </body>
          </html>
        dest: "{{ output_file }}"
        mode: '0644'
      delegate_to: localhost

    - name: Ensure target directory exists on local machine
      shell: >
        sshpass -p '{{ scp_password }}'
        ssh -o StrictHostKeyChecking=no {{ local_machine_user }}@{{ local_machine_ip }}
        "mkdir -p {{ local_machine_path }}"
      delegate_to: localhost

    - name: Copy the HTML report to local machine
      command: >
        sshpass -p '{{ scp_password }}'
        scp -o StrictHostKeyChecking=no {{ output_file }}
        {{ local_machine_user }}@{{ local_machine_ip }}:{{ local_machine_path }}/
      delegate_to: localhost

    - name: Summary of Combined Report
      debug:
        msg: >
          ✅ Report complete. {{ converted_unused_rules | length }} unused rules, 
          {{ rules_without_comments | length }} without comments, 
          {{ disabled_rules | length }} disabled rules.
          Report saved to {{ output_file }} and copied to {{ local_machine_path }}.
